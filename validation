"""This function handles the transfer process for the user."""
# TODO: Import the Checking, Savings, and Validation classes

# TODO: These should be imported from the appropriate file in the BankingClasses directory.

from BankingClasses.savings import Savings
from BankingClasses.validation import Validation

from BankingClasses.checking import Checking
from BankingClasses.savings import Savings
from BankingClasses.validation import Validation
# TODO: Import the handle_deposit, handle_withdrawal, handle_transfer, and balances functions
def create_account():
    class BankAccount:
        pass
    return BankAccount

BankAccount = create_account()  # Now it's defined
account = BankAccount()  

def deposit(self, amount):
        self.balance += amount

def withdraw(self, amount):
        if amount <= self.balance + self.overdraft_limit:
            self.balance -= amount
        else:
            raise ValueError("Insufficient funds")

def get_balance(self):
        return self.balance
# TODO: These should be imported from the appropriate file in the BankingFunctions directory.

def main():
    """
    This function is the entry point of the banking system.
    It prompts the user to enter their email and password for authentication.
    If the email and password are valid, the default balances are shown.
    It then presents a menu of options to the user,
    allowing them to make deposits, withdrawals, or transfers between accounts.
    """
    email = input("Enter your email: ")
    print("Your password should be at least 8 characters long,\n"
           "contain at least one uppercase and lowercase letter,\n"
           "one number, and one of the following special characters:!@#$%^&*.")
    password = input("Enter your password: ")

    # TODO: Initialize the attempts variable to 1.
    # TODO: Create a while loop to validate the email and password.
    # TODO: The while loop should run as long as the attempts variable is less than 3.

        # TODO: Validate the email and password using the Validation class.

            # If the email and password are invalid,
            # print a message and prompt the user to enter their email and password again.
print("Invalid email or password. Please try again.")
    


        # TODO: Otherwise, break out of the loop.

    # TODO: If the maximum number of attempts is reached, print a message and exit the program.

    # Set up accounts with default balances.
class CheckingAccount:
    def __init__(self, balance=0):
        self.balance = balance

account = CheckingAccount() 
checking_account = CheckingAccount(4321.00)

def create_account():
    class SavingsAccount:
        pass
    return SavingsAccount

SavingsAccount = create_account()  # Now it's defined
account = SavingsAccount()

    # Print a message for the user inform them of their checking and savings balances
print("Here are your account balances:")
    # TODO: Use the get_balance method to retrieve the current balance of each account.
def main():
    # Create instances of CheckingAccount and SavingsAccount
    checking_account = CheckingAccount(4321.00)
    savings_account = SavingsAccount()

    # Retrieve the current balance of each account
    
    

    # Print the balances

    # Create instances of CheckingAccount and SavingsAccount
    checking_account = CheckingAccount(4321.00)
    savings_account = SavingsAccount()

    # Retrieve the current balance of each account
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def get_balance(self):
        return self.balance

class CheckingAccount(BankAccount):
    def __init__(self, balance=0):
        super().__init__(balance)  # Call the parent constructor

class SavingsAccount(BankAccount):
    def __init__(self, balance=0):
        super().__init__(balance)  # Call the parent constructor

def main():
    # Create instances of CheckingAccount and SavingsAccount
    checking_account = CheckingAccount(4321.00)
    savings_account = SavingsAccount(6543.21)

    # Retrieve the current balance of each account
    checking_balance = checking_account.get_balance()  # This should work now
    savings_balance = savings_account.get_balance()    # This should work now

    # Print the balances
    print(f"Checking Account Balance: ${checking_balance:,.2f}")
    print(f"Savings Account Balance: ${savings_balance:,.2f}")

# Call the main function
main()
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def get_balance(self):
        return self.balance

class CheckingAccount(BankAccount):
    def __init__(self, balance=0):
        super().__init__(balance)

class SavingsAccount(BankAccount):
    def __init__(self, balance=0):
        super().__init__(balance)

def main():
    # Create instances of CheckingAccount and SavingsAccount
    checking_account = CheckingAccount(4321.00)
    savings_account = SavingsAccount(6543.21)  # Define savings_account here

    # Retrieve the current balance of each account
    checking_balance = checking_account.get_balance()
    savings_balance = savings_account.get_balance()  # Use savings_account here

    # Print the balances
    print(f"Checking Account Balance: ${checking_balance:,.2f}")
    print(f"Savings Account Balance: ${savings_balance:,.2f}")

# Call the main function
main()

    # Print the balances
def main():
    # Create instances of CheckingAccount and SavingsAccount
    checking_account = CheckingAccount(4321.00)
    savings_account = SavingsAccount(6543.21)

    # Retrieve the current balance of each account
    checking_balance = checking_account.get_balance()  # Define checking_balance here
    savings_balance = savings_account.get_balance()    # Define savings_balance here

    # Print the balances
    print(f"Checking Account Balance: ${checking_balance:,.2f}")  # Use checking_balance here
    print(f"Savings Account Balance: ${savings_balance:,.2f}")    # Define checking_balance here
print(f"Savings Account Balance: ${savings_balance:,.2f}")

print(f"Checking Account Balance: ${checking_balance:,.2f}")  # Use checking_balance her

# Call the main function
main()
print(f"Savings Account Balance: ${savings_balance:,.2f}")

def __init__(self, balance=0):
        self.balance = balance



savings_balance = savings_account.get_balance()  

main()

# Call the main function
main()
    # TODO: Write while loop to present options for the user.
    # TODO: Present a menu of options to the user.
    # TODO: Allowing them to make deposits, withdrawals, or transfers between accounts.

        # TODO: Create a list of valid choices.

            # TODO: Use if/elif conditional statements to check the user's choice.
            # TODO: If the choice is in the list of valid choices, call the appropriate function.
            # TODO: Pass in the checking_account and savings_account objects.


        # TODO: If the user enters an invalid choice, print a message.

if __name__ == "__main__":
    main()
